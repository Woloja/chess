@use "sass:math"

@function px-to-rem($px, $units: false)
    @if $units
        @return math.div($px, 16) * 1rem
    @else
        @return math.div($px, 16px) * 1rem

@function get-vw($px)
    $vw-context: ($layout-width * 0.01) * 1px
    @return math.div($px, $vw-context) * 1vw

@function get-vh($px)
    $vh-context: ($layout-height * 0.01) * 1px
    @return math.div($px, $vh-context) * 1vh

@function get-vw-by-layout($px, $layout: $layout-width)
    $vw-context: ($layout * 0.01) * 1px
    @return math.div($px, $vw-context) * 1vw

@mixin letter-space($spacing)
    letter-spacing: math.div($spacing, 1000) * 1em

@mixin text-style-rem($fontSize, $lineHeight: 0, $letterSpace: 0)
    font-size: math.div($fontSize, 16) * 1rem
    @if ($lineHeight != 0)
        line-height: math.div($lineHeight, $fontSize)
    @if ($letterSpace != 0)
        +letter-space($letterSpace)

@mixin text-style-vw($fontSize, $lineHeight: 0, $letterSpace: 0)
    $vw-context: ($layout-width*.01) * 1
    font-size: math.div($fontSize, $vw-context) * 1vw
    @if ($lineHeight != 0)
        line-height: math.div($lineHeight, $fontSize)
    @if ($letterSpace != 0)
        +letter-space($letterSpace)

@mixin font-face($font-family, $file-path, $weight: 400, $style: normal)
    @font-face
        font-family: $font-family
        src: url('#{$file-path}.eot'), url('#{$file-path}.woff') format('woff'), url('#{$file-path}.ttf') format('truetype')
        font-weight: $weight
        font-style: unquote($style)
        font-display: swap
        font-stretch: normal

//использование миксина  +mediaSize(value)
@mixin mediaMin($media)
    @media (min-width: $media+px)
        @content

@mixin mediaMax($media)
    @media (max-width: $media+px)
        @content

@mixin mediaMinMax($min, $max)
    @media (min-width: $min+px) and (max-width: $max+px)
        @content

@mixin placeholder
    &::-webkit-input-placeholder
        @content
    &:-moz-placeholder
        @content
    &::-moz-placeholder
        @content
    &:-ms-input-placeholder
        @content

@mixin scrollbar
    &::-webkit-scrollbar
        width: 10px
        height: 10px
        cursor: pointer
    &::-webkit-scrollbar-track
        cursor: pointer
        background: rgba($color-black, 0.3)
    &::-webkit-scrollbar-thumb
        background: rgba($color-black, 0.8)
    &::-webkit-scrollbar-thumb:hover
        background: rgba($color-black, 1)

@mixin scrollbar-thin
    &::-webkit-scrollbar
        width: 5px
        height: 5px
        cursor: pointer
    &::-webkit-scrollbar-track
        cursor: pointer
        background: rgba($color-black, 0.3)
    &::-webkit-scrollbar-thumb
        background: rgba($color-black, 0.8)
    &::-webkit-scrollbar-thumb:hover
        background: rgba($color-black, 1)

@mixin scrollbar-hide
    &::-webkit-scrollbar
        display: none
        width: 0
        height: 0

@mixin transition($prop, $time: 250ms, $easing: ease-in)
    $transition: ()
    @for $i from 1 through length($prop)
        @for $j from 0 to (length($prop)) - (length($time))
            $time: join($time, nth($time, -1))
        @for $j from 0 to (length($prop)) - (length($easing))
            $easing: join($easing, nth($easing, -1))
        $transition: append($transition, (nth($prop, $i) nth($time, $i) nth($easing, $i)), comma)
    transition: $transition

    $separated: ()

    @if length($prop) > 1
        @for $i from 1 through length($prop)
            $separated: append($separated, nth($prop, $i), comma)
        will-change: $separated
    @else if length($prop) == 1
        @if $prop != "all"
            will-change: $prop

//@if $prop != "all"
//    will-change: $separated

@mixin aspect-ratio($width, $height, $element: iframe)
    position: relative
    &:before
        display: flex
        content: ""
        width: 100%
        padding-top: math.div($height, $width) * 100%
    > #{$element}
        display: flex
        position: absolute
        top: 0
        left: 0
        right: 0
        bottom: 0
        width: 100%
        height: 100%
        object-fit: cover
        object-position: 0 0
        z-index: 5

@mixin autofill($color, $background)
    &:-webkit-autofill::first-line
        @content
        -webkit-text-fill-color: #{$color}
        -webkit-box-shadow: 0 0 0 1000px #{$background} inset
        transition: background-color 5000s ease-in-out 0s
        color: inherit !important
    &:-webkit-autofill
        @content
        -webkit-text-fill-color: #{$color}
        -webkit-box-shadow: 0 0 0 1000px #{$background} inset
        transition: background-color 5000s ease-in-out 0s
        color: inherit !important
    &:-webkit-autofill:hover
        -webkit-text-fill-color: #{$color}
        -webkit-box-shadow: 0 0 0 1000px #{$background} inset
        transition: background-color 5000s ease-in-out 0s
        color: inherit !important
        @content
    &:-webkit-autofill:focus
        -webkit-text-fill-color: #{$color}
        -webkit-box-shadow: 0 0 0 1000px #{$background} inset
        transition: background-color 5000s ease-in-out 0s
        color: inherit !important
        @content
    &:-internal-autofill-selected
        -webkit-text-fill-color: #{$color}
        -webkit-box-shadow: 0 0 0 1000px #{$background} inset
        transition: background-color 5000s ease-in-out 0s
        color: inherit !important
        @content
